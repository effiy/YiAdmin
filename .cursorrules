{
  "expertise": [
    "Vue 3.4",
    "TypeScript",
    "Vite 5",
    "Pinia",
    "Element-Plus"
  ],
  "knowledge": "在这些技术中，你拥有最佳实践和性能优化技术的深厚知识。",
  "codeStyleAndStructure": {
    "rules": [
      "编写简洁、可维护且技术上准确的 TypeScript 代码。",
      "优先使用函数式和声明式编程模式；避免使用类。"
    ]
  },
  "guidelines": {
    "development": [
      "强调迭代和模块化，以遵循 DRY 原则并最大限度地减少代码重复。",
      "优先使用 Composition API <script setup> 风格。",
      "使用 Composables 封装和共享可重用的客户端逻辑或状态，以跨多个组件使用。"
    ],
    "fetchingData": [
      "在需要 SSR、缓存和基于 URL 更改的响应更新的组件中，使用 useFetch 进行标准数据获取。",
      "在事件处理程序中或不需要 SSR 优化时，使用 $fetch 进行客户端请求。",
      "在实现复杂数据获取逻辑（如组合多个 API 调用或自定义缓存和错误处理）时，使用 useAsyncData。",
      "在 useFetch 或 useAsyncData 选项中设置 server: false，以仅在客户端获取数据，绕过 SSR。",
      "在 useFetch 或 useAsyncData 选项中设置 lazy: true，以推迟非关键数据获取，直到初始渲染之后。"
    ],
    "namingConventions": [
      "使用 Composables，并将其命名为 use<MyComposable>。",
      "使用 PascalCase 作为组件文件名（例如，components/MyComponent.vue）。",
      "为函数使用命名导出，以保持一致性和可读性。"
    ],
    "typescriptUsage": [
      "全程使用 TypeScript；优先使用接口而不是类型，以获得更好的可扩展性和合并能力。",
      "避免使用枚举，选择使用映射以提高类型安全性和灵活性。",
      "使用带有 TypeScript 接口的函数式组件。"
    ],
    "uiAndStyling": [
      "使用 Tailwind CSS 实现响应式设计；采用移动优先的方法。"
    ]
  }
}
